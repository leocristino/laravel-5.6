<?php

namespace App\Models;

use App\Models\Helpers\CawModel;
use App\Models\Helpers\CawHelpers;
use Illuminate\Http\Request;
use \DB;

class AccountReceivable extends CawModel
{

    protected $table    =  'financial_launch';
    protected $fillable = [
        'name',
        'id_person',
        'id_ticket',
        'id_payment_type',
        'id_bank_account',
        'account_type',
        'description',
        'due_date',
        'value_bill',
        'payment_date',
        'amount_paid',
        'description_bank_return',
        'chq_bank',
        'chq_agency',
        'chq_current_account',
        'chq_number',
        'chq_reason_return',
        'chq_date_return',
        'chq_lot'
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
    ];

    public $timestamps = true;

    public static function getList(Request $request){
        $builder = AccountReceivable::select('financial_launch.*',
                                                        'person.name_social_name',
                                                        'person.active as active_person',
                                                        'person.id as person_id')
                            ->join('person','person.id', '=','financial_launch.id_person')
                            ->join('ticket','ticket.id','=','financial_launch.id_ticket')
                            ->join('payment_type','payment_type.id','=','financial_launch.id_payment_type')
                            ->join('bank_account','bank_account.id','=','financial_launch.id_bank_account');

//        CawHelpers::addWhereLike($builder, 'bank_account.name', $request['name']);

//        if( $request['active'] != null){
//            $builder->where('bank_account.active', '=',  $request['active']);
//        }


//        $builder->orderBy('bank_account.name');

        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public function save(array $options = [])
    {
        dd($this);
//        if($this->name == "")
//        {
//            return new \Exception('O campo nome do serviço é obrigatório.');
//        }
////        if($this->currentBalance == "" || $this->price == "R$ 0") {
////            return new \Exception('O campo saldo inicial é obrigatório.');
////        }
//        if($this->balance_date == "")
//        {
//            return new \Exception('O campo data do saldo é obrigatório.');
//        }
//
//        if ($this->bill_option == '')
//        {
//            return new \Exception('O campo emite boleto é obrigatório.');
//        }

        return parent::save($options); // TODO: Change the autogenerated stub
    }

}