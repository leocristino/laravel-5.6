<?php
/**
 * Created by PhpStorm.
 * User: Valerio
 * Date: 09/06/2018
 * Time: 09:54
 */

namespace App\Models\Helpers;


use Codedge\Fpdf\Fpdf\Fpdf;

class CawPDF extends Fpdf
{

    /**
     * CawPDF constructor.
     */
    private $hasHeader = true;
    private $reportName = '';
    private $fnHeader;
    private $fnFooter;
    private $filters;


    //variables of html parser
    protected $B;
    protected $I;
    protected $U;
    protected $HREF;
    protected $fontList;
    protected $issetfont;
    protected $issetcolor;

    /**
     * CawPDF constructor.
     * @param bool $hasHeader
     */
    public function __construct($hasHeader, $reportName = '')
    {
        parent::__construct();

        $this->hasHeader = $hasHeader;
        $this->reportName = $reportName;

        $this->SetTitle(utf8_decode($reportName));

        //Call parent constructor
        //Initialization
        $this->B=0;
        $this->I=0;
        $this->U=0;
        $this->HREF='';
        //$this->fontlist=array('arial', 'times', 'courier', 'helvetica', 'symbol');
        $this->issetfont=false;
        $this->issetcolor=false;
    }

    /**
     * @param mixed $fnHeader
     */
    public function setFnHeader($fnHeader)
    {
        $this->fnHeader = $fnHeader;
    }

    /**
     * @param mixed $fnFooter
     */
    public function setFnFooter($fnFooter)
    {
        $this->fnFooter = $fnFooter;
    }

    /**
     * @param mixed $filters
     */
    public function setFilters($filters)
    {
        $this->filters = $filters;
    }


    //modo de uso da função de Header
    //$header = function() use ($pdf){
    //
    //            $pdf->SetFont('Arial','B',25);
    //            $pdf->Cell(40,10,'oie!');
    //        };
    //
    //$pdf->setFnHeader($header);
    function Header(){
        if($this->hasHeader) {
            //cabecalho base
            $this->Image(public_path('images/logotatical.png'), $this->lMargin, 5, 15, 15);

            $this->SetFont('Arial', 'B', 12);
            $this->Cell($this->GetPageWidth() - ($this->lMargin + $this->rMargin), 4, $this->reportName, 0, 1, 'C');

            $this->SetFont('Arial', '', 8);
            if(isset($this->filters) && is_array($this->filters) && !empty($this->filters)){
                $filter_text = 'Filtros: ';
                foreach ($this->filters as $k => $v) {
                    $filter_text .= "[$k: $v]  ";
                }
                $this->SetX(30);
                $this->MultiCell($this->GetPageWidth() - 60, 4, $filter_text);
            }

            $this->SetFont('Arial', '', 8);
            $this->SetY(8);
            $this->Cell($this->GetPageWidth() - ($this->lMargin + $this->rMargin), 4, date('d/m/Y H:i:s'), 0, 1, 'R');
            $this->Cell($this->GetPageWidth() - ($this->lMargin + $this->rMargin), 4, 'Pág. '.$this->PageNo().'/{nb}', 0, 1, 'R');
            $this->SetY(21);
            $this->HrLine();

            $this->SetFont('Arial', '', 8);
        }

        if(is_callable($this->fnHeader)){
            call_user_func($this->fnHeader);
        }

        parent::Header(); // TODO: Change the autogenerated stub
    }

    function Footer()
    {
        parent::Footer(); // TODO: Change the autogenerated stub
        if(is_callable($this->fnFooter)){
            call_user_func($this->fnFooter);
        }

    }

    function Cell($w, $h = 0, $txt = '', $border = 0, $ln = 0, $align = '', $fill = false, $link = '')
    {
        $txt = utf8_decode($txt);
        if($this->GetStringWidth($txt) > $w){
            $max_chars = ($this->GetStringWidth($txt) / strlen($txt)) * $w;
            $max_chars += 5; //adiciona alguns chars pra não limpar muito

            $txt = substr($txt, 0, $max_chars);
        }
        while($this->GetStringWidth($txt) > $w){
            $txt = substr($txt, 0, strlen($txt)-1);
        }
        parent::Cell($w, $h, $txt, $border, $ln, $align, $fill, $link); // TODO: Change the autogenerated stub
    }

    function MultiCell($w, $h, $txt, $border = 0, $align = 'J', $fill = false)
    {
        $txt = utf8_decode($txt);
        parent::MultiCell($w, $h, $txt, $border, $align, $fill); // TODO: Change the autogenerated stub
    }

    function Write($h, $txt, $link = '')
    {
        $txt = utf8_decode($txt);
        parent::Write($h, $txt, $link); // TODO: Change the autogenerated stub
    }

    function Text($x, $y, $txt)
    {
        $txt = utf8_decode($txt);
        parent::Text($x, $y, $txt); // TODO: Change the autogenerated stub
    }

    function Output($dest = '', $name = '', $isUTF8 = false)
    {
        $this->AliasNbPages();
        return parent::Output($dest, $name, $isUTF8); // TODO: Change the autogenerated stub
    }

    public function HrLine($y = null){
        if($y == null){
            $y = $this->GetY();
        }
        $this->Line($this->lMargin, $y, $this->GetPageWidth() - $this->rMargin, $y);
    }

    /**
     * @return mixed
     */
    public function getLMargin()
    {
        return $this->lMargin;
    }

    public function getRMargin()
    {
        return $this->rMargin;
    }

    public function getReportName()
    {
        return $this->reportName;
    }


    /*public function Table($widths, $titles, $data){
        $header = function() use ($widths, $titles){

            $this->SetFont('Arial','B',8);

            for($i = 0; $i < count($widths); $i++) {
                $this->Cell($widths[$i],4, $titles[$i]);
            }
            $this->Ln();
            $this->HrLine();
        };
        $this->setFnHeader($header);

        $this->AddPage();
        $this->SetFont('Arial','',8);

        foreach ($data as $item) {
            for($i = 0; $i < count($widths); $i++) {
                $this->Cell($widths[$i] ,4, $item[$i]);
            }
        }
    }*/

    public function WriteHTML($html)
    {
//        $html = utf8_encode($html);
        //HTML parser
        $html=strip_tags($html,"<b><u><i><a><img><p><br><strong><em><font><tr><blockquote>"); //supprime tous les tags sauf ceux reconnus
        $html=str_replace("\n",' ',$html); //remplace retour à la ligne par un espace
        $a=preg_split('/<(.*)>/U',$html,-1,PREG_SPLIT_DELIM_CAPTURE); //éclate la chaîne avec les balises
        foreach($a as $i=>$e)
        {
            if($i%2==0)
            {
                //Text
                if($this->HREF)
                    $this->PutLink($this->HREF,$e);
                else
                    $this->Write(5,stripslashes(utf8_encode(self::txtentities(   $e))));
            }
            else
            {
                //Tag
                if($e[0]=='/')
                    $this->CloseTag(strtoupper(substr($e,1)));
                else
                {
                    //Extract attributes
                    $a2=explode(' ',$e);
                    $tag=strtoupper(array_shift($a2));
                    $attr=array();
                    foreach($a2 as $v)
                    {
                        if(preg_match('/([^=]*)=["\']?([^"\']*)/',$v,$a3))
                            $attr[strtoupper($a3[1])]=$a3[2];
                    }
                    $this->OpenTag($tag,$attr);
                }
            }
        }
    }

    private function OpenTag($tag, $attr)
    {
        //Opening tag
        switch($tag){
            case 'STRONG':
                $this->SetStyle('B',true);
                break;
            case 'EM':
                $this->SetStyle('I',true);
                break;
            case 'B':
            case 'I':
            case 'U':
                $this->SetStyle($tag,true);
                break;
            case 'A':
                $this->HREF= !empty($attr['HREF']) ? $attr['HREF'] : '';
                break;
            case 'IMG':
                if(isset($attr['SRC']) && (isset($attr['WIDTH']) || isset($attr['HEIGHT']))) {
                    if(!isset($attr['WIDTH']))
                        $attr['WIDTH'] = 0;
                    if(!isset($attr['HEIGHT']))
                        $attr['HEIGHT'] = 0;
                    $this->Image($attr['SRC'], $this->GetX(), $this->GetY(), px2mm($attr['WIDTH']), self::px2mm($attr['HEIGHT']));
                }
                break;
            case 'TR':
            case 'BLOCKQUOTE':
            case 'BR':
                $this->Ln(5);
                break;
            case 'P':
                $this->Ln(10);
                break;
            case 'FONT':
                if (isset($attr['COLOR']) && $attr['COLOR']!='') {
                    $coul=self::hex2dec($attr['COLOR']);
                    $this->SetTextColor($coul['R'],$coul['V'],$coul['B']);
                    $this->issetcolor=true;
                }
                if (isset($attr['FACE']) && in_array(strtolower($attr['FACE']), $this->fontlist)) {
                    $this->SetFont(strtolower($attr['FACE']));
                    $this->issetfont=true;
                }
                break;
        }
    }

    private function CloseTag($tag)
    {
        //Closing tag
        if($tag=='STRONG')
            $tag='B';
        if($tag=='EM')
            $tag='I';
        if($tag=='B' || $tag=='I' || $tag=='U')
            $this->SetStyle($tag,false);
        if($tag=='A')
            $this->HREF='';
        if($tag=='FONT'){
            if ($this->issetcolor==true) {
                $this->SetTextColor(0);
            }
            if ($this->issetfont) {
                $this->SetFont('arial');
                $this->issetfont=false;
            }
        }
    }

    private function SetStyle($tag, $enable)
    {
        //Modify style and select corresponding font
        $this->$tag+=($enable ? 1 : -1);
        $style='';
        foreach(array('B','I','U') as $s)
        {
            if($this->$s>0)
                $style.=$s;
        }
        $this->SetFont('',$style);
    }

    private function PutLink($URL, $txt)
    {
        //Put a hyperlink
        $this->SetTextColor(0,0,255);
        $this->SetStyle('U',true);
        $this->Write(5,$txt,$URL);
        $this->SetStyle('U',false);
        $this->SetTextColor(0);
    }

    //function hex2dec
    //returns an associative array (keys: R,G,B) from
    //a hex html code (e.g. #3FE5AA)
    private function hex2dec($couleur = "#000000"){
        $R = substr($couleur, 1, 2);
        $rouge = self::hexdec($R);
        $V = substr($couleur, 3, 2);
        $vert = self::hexdec($V);
        $B = substr($couleur, 5, 2);
        $bleu = self::hexdec($B);
        $tbl_couleur = array();
        $tbl_couleur['R']=$rouge;
        $tbl_couleur['V']=$vert;
        $tbl_couleur['B']=$bleu;
        return $tbl_couleur;
    }

    //conversion pixel -> millimeter at 72 dpi
    private function px2mm($px){
        return $px*25.4/72;
    }

    private function txtentities($html){
        $trans = get_html_translation_table(HTML_ENTITIES);
        $trans = array_flip($trans);
        return strtr($html, $trans);
    }
}