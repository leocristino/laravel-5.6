<?php

namespace App\Models;

use App\Models\Helpers\CawModel;
use App\Models\Helpers\CawHelpers;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Http\Request;
use \DB;

class PayableReceivable extends CawModel
{
    use SoftDeletes;

    protected $table    =  'financial_launch';
    protected $fillable = [
        'id_person',
        'id_ticket',
        'id_payment_type',
        'id_bank_account',
        'account_type',
        'description',
        'due_date',
        'value_bill',
        'payment_date',
        'amount_paid',
        'description_bank_return',
        'chq_bank',
        'chq_agency',
        'chq_current_account',
        'chq_number',
        'chq_reason_return',
        'chq_date_return',
        'lot'

    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
    ];

    public $timestamps = true;

    public static function getList(Request $request){
        $builder = PayableReceivable::select('financial_launch.*',
                                                        'person.name_social_name',
                                                        'person.active as active_person',
                                                        'person.id as person_id',
                                                        'bank_account.name as name_bank_account',
                                                        'payment_type.name as name_payment_type',
                                                        'ticket.name as name_ticket')
                            ->join('person','person.id', '=','financial_launch.id_person')
                            ->join('ticket','ticket.id','=','financial_launch.id_ticket')
                            ->join('payment_type','payment_type.id','=','financial_launch.id_payment_type')
                            ->leftJoin('bank_account','bank_account.id','=','financial_launch.id_bank_account');

        CawHelpers::addWhereLike($builder, 'person.name_social_name', $request['name_social_name']);
        CawHelpers::addWhereLike($builder, 'financial_launch.account_type', $request['account_type']);
        CawHelpers::addWhereLike($builder, 'financial_launch.lot', $request['lot']);

        $builder->orderBy('financial_launch.id');
        if (isset($_GET['report']) == true)
        {
            return $builder->get();
        }
        else
        {
            return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
        }
    }

    public function save(array $options = [])
    {
        if($this->id_person == "")
        {
            return new \Exception('O campo Pessoa é obrigatório.');
        }

        if($this->id_ticket == "")
        {
            return new \Exception('O campo Plano de Contas é obrigatório.');
        }

        if($this->id_payment_type == "")
        {
            return new \Exception('O campo Forma de Pagamento é obrigatório.');
        }

        if($this->due_date == null)
        {
            return new \Exception('O campo Data de Vencimento é obrigatório.');
        }

        if($this->value_bill == 0)
        {
            return new \Exception('O campo Valor a Pagar é obrigatório.');
        }


        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public function saveBilling(array $options = [])
    {
        return parent::save($options); // TODO: Change the autogenerated stub

    }

    public static function deleteLine($id)
    {

        $account_receivable = PayableReceivable::query()
            ->where('id', '=', $id)
            ->delete();

        if ($account_receivable > 0) {
            return true;
        } else {
            return false;
        }
    }

    public static function selectToBill($id_person, $date, $number_contract)
    {
        $builder = PayableReceivable::select('due_date')
            ->where('id_person','=', $id_person)
            ->where('contract_number','=', $number_contract)
            ->where('due_date','=', $date);

//        dd($builder->toSql(),$builder->getBindings());

        return $builder->get();
    }

    public static function invoicesNFS($request)
    {
        $builder = DB::table('financial_launch')
            ->select(DB::raw('lot, count(*) as totalLot, max(created_at) as dateLot, SUM(value_bill) as value, due_date, id, id_bank_account'))

            ->where('account_type','=','R')
            ->where('lot','<>','')
            ->groupBy('lot','id_bank_account');
        if ($request['lot'] != '')
        {
            $builder->where('lot', '=', $request['lot']);
        }

//        $builder = PayableReceivable::select('*');
//        dd($builder->toSql(),$builder->getBindings());
        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public static function selectedSendForEmail($id, $id_bank_account)
    {
        $builder = PayableReceivable::select(['financial_launch.*','payment_type.name','person.*','financial_launch.id as id_financial_launch'])
            ->join('person','person.id','=','financial_launch.id_person')
//            ->join('financial_launch','financial_launch.id_person','=','person.id')
            ->join('payment_type','payment_type.id','=','financial_launch.id_payment_type')
            ->where('account_type','=','R')
            ->where(DB::raw('md5(financial_launch.id_bank_account)') , $id_bank_account)
            ->where(DB::raw('md5(financial_launch.lot)') , $id);

//        dd($builder->toSql(),$builder->getBindings());
//        dd($builder->get());

        return $builder->get();
    }

}