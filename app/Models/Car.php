<?php

namespace App\Models;

use App\Models\Helpers\CawModel;
use App\Models\Helpers\CawHelpers;
use Illuminate\Http\Request;
use \DB;
use Mockery\Exception;

class Car extends CawModel
{

    protected $table    =  'contract_car';
    protected $fillable = [
        'id_contract',
        'license_plate',
        'model',
        'color',
        'chassis',
        'driver_license',
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
    ];

    public $timestamps = true;

    public static function getList(Request $request){

        $builder = Car::select('contract_car.*');

        CawHelpers::addWhereLike($builder, 'model', $request['model']);

//        if ($request['active'] != ""){
//            $builder->where('active','=',$request['active']);
//        }

        $builder->orderBy('contract_car.model');
        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public function save(array $options = [])
    {
        if($this->model == "")
        {
            return new Exception("O campo modelo é obrigatório.");
        }

        if($this->license_plate == "")
        {
            return new Exception("O campo placa é obrigatório.");
        }

        if ($this->color == "")
        {
            return new Exception("O campo cor é obrigatório.");
        }

        if ($this->chassis == "")
        {
            return new Exception("O campo chassi é obrigatório.");
        }

        if ($this->driver_license == "")
        {
            return new Exception("O campo CNH motorista é obrigatório.");
        }

        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public static function updateArray($id_contract, $itens)
    {
        try {
            DB::beginTransaction();
            foreach ($itens as $item) {
                $verificador = isset($item['active']) ? false : true;

                //adicionando valores
                if (empty($item['id_contract']) && $verificador === true)
                {
                    if (empty($item['id_contract']))
                        $item['id_contract'] = $id_contract;

                    $item = new Car($item);
                    $item['id_contract'] = $id_contract;
                    $item->save();
                }
                //excluindo valores
                else if (!empty($item['id_contract'])&& $verificador === false)
                {
                    Car::query()
                        ->where('id_contract', '=', $id_contract)
                        ->where('id', '=', $item['id'])->delete();

                }

            }

            DB::commit();
            return true;

        }catch (\Exception $e){
            DB::rollBack();
            return $e;
        }
    }
    public static function getListReport($request)
    {
        $builder = Car::select('*')
            ->leftJoin('contract', 'contract.id', '=', 'id_contract')
            ->leftJoin('person', 'person.id', '=', 'contract.id_person');

        CawHelpers::addWhereLike($builder, 'name_social_name', $request['name_social_name']);
        CawHelpers::addWhereLike($builder, 'id_payment_type', $request['id_payment_type']);

        if ($request['id_contract'])
        {
            $builder->where('contract.id', '=', $request['id_contract']);
        }

        if ($request['end_date'] == '1')
        {
            $builder->where(function ($query) {
                $query->where('contract.end_date', '=', NULL)
                    ->orWhere('contract.end_date', '>=', date('Y-m-d'));
            });
        }
        elseif($request['end_date'] != '')
        {
            $builder->where('contract.end_date','<', $request['end_date']);
        }

        $builder->orderBy('contract.id');
        return $builder->get();
    }

    public static function getSelect(){
        return Car::where('active','=',1)->get();
    }
}