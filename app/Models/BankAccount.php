<?php

namespace App\Models;

use App\Models\Helpers\CawModel;
use App\Models\Helpers\CawHelpers;
use Illuminate\Http\Request;
use \DB;

class BankAccount extends CawModel
{

    protected $table    =  'bank_account';
    protected $fillable = [
        'name',
        'id_bank',
        'agency',
        'account_current',
        'current_balance',
        'balance_date',
        'bill_option',
        'wallet',
        'special_code',
        'pact',
        'transmission_code',
        'complement',
        'local_pay',
        'instruction',
        'who_send_ticket',
        'price_of_send',
        'active',
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
    ];

    public $timestamps = true;

    public static function getList(Request $request){
        $builder = Service::select('bank_account.*');

        CawHelpers::addWhereLike($builder, 'name', $request['name']);

        if( $request['active'] != null){
            $builder->where('active', '=',  $request['active']);
        }


        $builder->orderBy('service.name');
//        dd($builder);

        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public function save(array $options = [])
    {
        if($this->name == "")
        {
            return new \Exception('O campo nome do serviço é obrigatório.');
        }
        if($this->price == "" || $this->price == "R$ 0") {
            return new \Exception('O campo valor do serviço é obrigatório.');
        }

        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public function getPriceAttribute($value)
    {
        if ($value != "")
        {
            $value = CawHelpers::decodeMoeda($value);
        }

        return "R$ ". $value;
    }

    public static function activeDisabled($id, $type){

        try {
            $service = Service::where('id', '=', $id)
                ->first();
            if($service != null) {

                if ($type == 1) {
                    $service->active = 0;
                } else {
                    $service->active = 1;
                }

                $res = $service->save();

                if($res === true){
                    return true;
                }else{
                    return false;
                }
            }else{
                return false;
            }

        }catch (QueryException $e){
            return false;
        }
    }
}