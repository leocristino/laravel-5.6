<?php

namespace App\Models;

use App\Models\Helpers\CawModel;
use App\Models\Helpers\CawHelpers;
use Illuminate\Http\Request;

class Ticket extends CawModel
{

    protected $table    =  'ticket';
    protected $fillable = [
        'type',
        'name',
        'active',
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
    ];

    public $timestamps = true;

    public static function getList(Request $request){

        $builder = Ticket::select("id",
                                "type",
                                "name",
                                "active");

        CawHelpers::addWhereLike($builder, 'name', $request['name']);
        CawHelpers::addWhereLike($builder, 'type', $request['type']);

        if($request['active'] != null)
        {
            $builder->where('active','=',$request['active']);
        }

        $builder->orderBy('type','name');

        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public function save(array $options = [])
    {
        if($this->type == ""){
            return new \Exception('O campo tipo de conta Ã© obrigatÃ³rio.');
        }

        if($this->name == ""){
            return new \Exception('O campo nome da conta Ã© obrigatÃ³rio.');
        }



        return parent::save($options); // TODO: Change the autogenerated stub
    }



    /**
     * @param $id_user
     * @param $type
     * @return bool
     */
    public static function activeDisabled($id, $type){

        try {
            $ticket = Ticket::where('id', '=', $id)
                ->first();
            if($ticket != null) {

                if ($type == 1) {
                    $ticket->active = 0;
                } else {
                    $ticket->active = 1;
                }

                $res = $ticket->save();

                if($res === true){
                    return true;
                }else{
                    return false;
                }
            }else{
                return false;
            }

        }catch (QueryException $e){
            return false;
        }
    }

    public static function getSelect(){
        return Ticket::where('active','=',1)->get();
    }
}