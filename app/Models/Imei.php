<?php

namespace App\Models;

use App\Models\Helpers\CawModel;
use App\Models\Helpers\CawHelpers;
use Illuminate\Http\Request;
use \DB;
use Mockery\Exception;

class Imei extends CawModel
{

    protected $table    =  'imei';
    protected $fillable = [
        'number',
        'description',
        'active',
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
    ];

    public $timestamps = true;

    public static function getList(Request $request){

        $builder = Imei::select('imei.*');

//        dd($builder);
        CawHelpers::addWhereLike($builder, 'number', $request['number']);

        if ($request['active'] != ""){
            $builder->where('active','=',$request['active']);
        }

        $builder->orderBy('imei.number');
        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public function save(array $options = [])
    {
        if($this->number == "")
        {
            return new Exception("O campo imei é obrigatório.");
        }

        if($this->description == "")
        {
            return new Exception("O campo descrição é obrigatório.");
        }

        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public static function activeDisabled($id, $type){

        try {
            $imei = Imei::where('id', '=', $id)
                ->first();
            if($imei != null) {

                if ($type == 1) {
                    $imei->active = 0;
                } else {
                    $imei->active = 1;
                }

                $res = $imei->save();

                if($res === true){
                    return true;
                }else{
                    return false;
                }
            }else{
                return false;
            }

        }catch (QueryException $e){
            return false;
        }
    }

    public static function updateArray($id_contract, $itens)
    {
        try {
            DB::beginTransaction();
            foreach ($itens as $item) {
                $verificador = isset($item['active']) ? false : true;

                //adicionando valores
                if (empty($item['id_contract']) && $verificador === true)
                {
                    if (empty($item['id_contract']))
                        $item['id_contract'] = $id_contract;

                    $item = new Imei($item);
                    $item['id_contract'] = $id_contract;
                    $item->save();
                }
                //excluindo valores
                else if (!empty($item['id_contract'])&& $verificador === false)
                {
                    Imei::query()
                        ->where('id_contract', '=', $id_contract)
                        ->where('id', '=', $item['id'])->delete();

                }

            }

            DB::commit();
            return true;

        }catch (\Exception $e){
            DB::rollBack();
            return $e;
        }
    }

    public static function getSelect(){
        return Imei::where('active','=',1)->get();
    }
}