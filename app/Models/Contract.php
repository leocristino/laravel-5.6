<?php

namespace App\Models;

use App\Models\Helpers\CawModel;
use App\Models\Helpers\CawHelpers;
use Illuminate\Http\Request;
use \DB;
use Mockery\Exception;

class Contract extends CawModel
{

    protected $table    =  'contract';
    protected $fillable = [
        'id_person',
        'id_payment_type',
        'due_day',
        'emergency_password',
        'contra_emergency_password',
        'start_date',
        'end_date',
        'active',
    ];


    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
    ];

    public $timestamps = true;

    public static function getList(Request $request){

        $builder = Contract::select('contract.*',
                                            'person.id as id_person',
                                            'person.name_social_name',
                                            'payment_type.id as id_payment_type',
                                            'payment_type.name')
            ->addSelect(DB::raw("(select COUNT(car.id) from car
            where car.id_contract = contract.id) as qtde_valores_car"))
            ->addSelect(DB::raw("(select COUNT(imei.id) from imei
            where imei.id_contract = contract.id) as qtde_valores_imei"))
            ->join('person', 'person.id', '=', 'contract.id_person')
            ->join('payment_type','payment_type.id','=','contract.id_payment_type');

        CawHelpers::addWhereLike($builder, 'person.name_social_name', $request['name_social_name']);
        CawHelpers::addWhereLike($builder, 'contract.id_payment_type', $request['id_payment_type']);
        CawHelpers::addWhereLike($builder, 'contract.id', $request['id_contract']);

        if ($request['active'] != ""){
            $builder->where('contract.active','=',$request['active']);
        }
        $builder->orderBy('contract.id');
        return $builder->paginate(config('app.list_count'))->appends($request->except('page'));
    }

    public function save(array $options = [])
    {
        if($this->id_person == "") {
            return new Exception("O campo Pessoa é obrigatório.");
        }

        if ($this->id_payment_type == "") {
            return new Exception("o campo tipo de pagamento é obrigatório.");
        }

        if ($this->due_day == "") {
            return new Exception("o campo dia de pagamento é obrigatório.");
        }

        if ($this->emergency_password == "") {
            return new Exception("o campo senha é obrigatório.");
        }

        if ($this->emergency_password == "") {
            return new Exception("o campo senha é obrigatório.");
        }

        if ($this->start_date == "") {
            return new Exception("o campo data inicial é obrigatório.");
        }

        return parent::save($options); // TODO: Change the autogenerated stub
    }

    public static function activeDisabled($id, $type)
    {
        try {
            $contract = Contract::where('contract.id', '=', $id)
                ->first();
            if($contract != null) {

                if ($type == 1) {
                    $contract->active = 0;
                } else {
                    $contract->active = 1;
                }

                $res = $contract->save();

                if($res === true){
                    return true;
                }else{
                    return false;
                }
            }else{
                return false;
            }

        }catch (QueryException $e){
            return false;
        }
    }

    public function getCar(){
        return $this->hasMany(Car::class, 'id_contract')->get();
    }
    public function getImei(){
        return $this->hasMany(Imei::class, 'id_contract')->get();
    }
}